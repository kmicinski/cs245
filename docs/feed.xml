<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Computer Security</title>
    <description>Computer Security: Attacks and Defenses (CMSC311 at Haverford College).</description>
    <link>http://kmicinski.com/cybersecurity-course/</link>
    <atom:link href="http://kmicinski.com/cybersecurity-course/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 01 Apr 2018 20:48:45 -0400</pubDate>
    <lastBuildDate>Sun, 01 Apr 2018 20:48:45 -0400</lastBuildDate>
    <generator>Jekyll v3.6.0</generator>
    
      <item>
        <title>Networking Intro</title>
        <description>&lt;h4 id=&quot;networking-intro-slides&quot;&gt;Networking Intro Slides&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://kmicinski.com//cybersecurity-course/assets/slides/networking-intro.key&quot;&gt;Keynote&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://kmicinski.com//cybersecurity-course/assets/slides/networking-intro.pdf&quot;&gt;PDF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 27 Mar 2018 00:00:00 -0400</pubDate>
        <link>http://kmicinski.com/cybersecurity-course/lectures/10</link>
        <guid isPermaLink="true">http://kmicinski.com/cybersecurity-course/lectures/10</guid>
        
        
        <category>lectures</category>
        
      </item>
    
      <item>
        <title>Project 2G: Secure SquirrelChat</title>
        <description>&lt;p&gt;In the previous project, you implemented a server for SquirrelChat–a
fake protocol we built for the course. The problem with SquirrelChat
was that it ran over raw sockets: anyone in the middle of the
connection could “snoop in” and see what was happening. In this
project, we’ll fix that, using encryption.&lt;/p&gt;

&lt;p&gt;This portion of the project is group work. During the course of this
project you are allowed access to all online resources, but you are
required to cite any resource that gave you any significant insight
into the project, including conversations you had with those outside
of your group. You will put these sources in &lt;code class=&quot;highlighter-rouge&quot;&gt;SOURCES.md&lt;/code&gt; within this
folder.&lt;/p&gt;

&lt;p&gt;Please respect the department’s collaboration policy. Specifically,
you are not allowed to look at any other group’s &lt;em&gt;code&lt;/em&gt; (or do
anything equivalent, such as talking through your code on a
line-by-line basis). You may discuss pseudo-code on the board, but
afterwards you must erase it (so as to not let anyone else see it) and
then cite your conversation with the other person in a comment in your
code (and in the sources file). &lt;strong&gt;Within&lt;/strong&gt; your group you may
collaborate in whatever way you want.&lt;/p&gt;

&lt;h2 id=&quot;project-overview&quot;&gt;Project Overview&lt;/h2&gt;

&lt;p&gt;This project will consist of the following parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Building / extending a client to the chat server&lt;/li&gt;
  &lt;li&gt;Running the protocol over TLS&lt;/li&gt;
  &lt;li&gt;Properly encrypting passwords in a password database&lt;/li&gt;
  &lt;li&gt;Extending the protocol to handle file uploads&lt;/li&gt;
  &lt;li&gt;Storing encrypted logs for chat conversations&lt;/li&gt;
  &lt;li&gt;Encrypted private messages with negotiated key exchange or public keys&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For starter code for this project, you will use the server
implementation from any groupmember you choose. Feel free to mix and
match parts of your project 2I implementations to fuse them together
into a successful implementation for 2G.&lt;/p&gt;

&lt;p&gt;Please get the starter code from Github Classroom, so I can then grade
your repo. For people not registered in the course, I have put up my
starter code here&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/kmicinski/chat-server-group
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This contains a &lt;code class=&quot;highlighter-rouge&quot;&gt;client&lt;/code&gt; directory, which contains the starter
client. This client &lt;em&gt;should&lt;/em&gt; work with your 2I submission, but please
let me know of any discrepancies you notice. I’ve tested it with a few
different students’ submissions.&lt;/p&gt;

&lt;h2 id=&quot;collaboration-policy&quot;&gt;Collaboration Policy&lt;/h2&gt;

&lt;p&gt;Specific examples that extend the collaboration policy for this lab:
Same as on Project 1I, except replace ever occurrence of “other
students” with “other groups.” This is to say, you may say whatever
you want to your groupmembers, but shouldn’t talk about low-level
details and addresses with other groups. I was quite satisfied with
the level of collaboration that happened on the last project, so keep
it up.&lt;/p&gt;

&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;For this project, you will secure the server using cryptography. You
will also propose and design several changes to the protocol. Changes
you make to the server must also be reflected in the client, so that
you can communicate. Note that because you will implement TLS, you
will no longer be able to simply use &lt;code class=&quot;highlighter-rouge&quot;&gt;telnet&lt;/code&gt; to communicate with the
server (since telnet does not properly perform TLS handshakes and
perform the proper encryption).&lt;/p&gt;

&lt;p&gt;For this part, I recommend using Python’s
&lt;a href=&quot;https://cryptography.io/en/latest/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cryptography&lt;/code&gt;&lt;/a&gt; library. You
can–however–use any cryptographic library of your choice, at your
own risk.&lt;/p&gt;

&lt;h3 id=&quot;part-1-running-the-connection-via-tls-20-points&quot;&gt;Part 1: Running the connection via TLS (20 points)&lt;/h3&gt;

&lt;p&gt;The easiest way to gain security for the server is to use
&lt;a href=&quot;https://en.wikipedia.org/wiki/Transport_Layer_Security&quot;&gt;TLS&lt;/a&gt;
(formerly SSL). TLS is a simple way to get security “for free,”
allowing you to run a normal socket on top of an encrypted channel.&lt;/p&gt;

&lt;p&gt;Before attempting this part, I also recommend going through the
following posts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://chaobin.github.io/2015/07/22/a-working-understanding-on-SSL-and-HTTPS-using-python/&lt;/li&gt;
  &lt;li&gt;http://www.moserware.com/2009/06/first-few-milliseconds-of-https.html&lt;/li&gt;
  &lt;li&gt;https://stackoverflow.com/questions/12310029/certificates-for-client-side-in-tls&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(&lt;strong&gt;BIG NOTE&lt;/strong&gt;: The accepted answer in the last link has a &lt;strong&gt;major
flaw&lt;/strong&gt;, because it stores the key and cert in the same file, which
gives the client access to the secret key. This is terrible security.)&lt;/p&gt;

&lt;p&gt;For this part of the project, you will implement TLS in both the
client and the server. I recommend you read through &lt;a href=&quot;https://markusholtermann.eu/2016/09/ssl-all-the-things-in-python/&quot;&gt;this
tutorial&lt;/a&gt;
along with the &lt;a href=&quot;https://docs.python.org/2/library/ssl.html&quot;&gt;manual for the &lt;code class=&quot;highlighter-rouge&quot;&gt;ssl&lt;/code&gt; library in
Python&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the server to use the protocol properly, you need to make it so
that the connection is protected using a certificate. To do this,
you’ll have to enable the proper options in both the server and client
when setting up the connection, and generate a certificate for the
server. You can generate a certificate for the server &lt;a href=&quot;https://stackoverflow.com/questions/10175812/how-to-create-a-self-signed-certificate-with-openssl&quot;&gt;like
this&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl req -new -x509 -days 365 -nodes -out cert.pem -keyout key.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the client to run the protocol, they will also need to know (and
more importantly, &lt;em&gt;trust&lt;/em&gt;) the certificate used by the server. You can
do this in whatever way you want. For example, you can extend the
server to take a command-line argument specifying the filename of the
server’s certificate, or you can require that the certificate be
stored at some specific file in the client’s directory.&lt;/p&gt;

&lt;p&gt;Whatever you do, make sure it’s configurable.&lt;/p&gt;

&lt;h4 id=&quot;deliverables-for-this-part&quot;&gt;Deliverables for This Part&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The modified server code, which correctly accepts TLS-protected
connections using a self-signed certificate.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The modified client code, which correctly communicates with the
server and checks its certificate against the one you generate.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;part-2-securing-passwords-15-points&quot;&gt;Part 2: Securing Passwords (15 points)&lt;/h3&gt;

&lt;p&gt;Next, you should come up with some sensible way to encrypt
passwords. You can do this however you want, but I encourage you to
put some thought into how you’re doing it. This part should be easy,
since you shouldn’t be rolling your own password management. Instead,
I recommend something like &lt;code class=&quot;highlighter-rouge&quot;&gt;PassLib&lt;/code&gt; for Python, which automatically
generates and salts passwords.&lt;/p&gt;

&lt;h4 id=&quot;deliverables-for-this-part-1&quot;&gt;Deliverables for This Part&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Part of your design document specifies how passwords are hashed, and
how they are salted.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Include the precise mechanism (e.g., the name of the hash algorithm)
used by your password management scheme.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Discussion with another group, your reflections on their experience,
and how the conversation helped your design (if it did).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;part-3-encrypted-logs-20-points&quot;&gt;Part 3: Encrypted Logs (20 points)&lt;/h3&gt;

&lt;p&gt;For this part of the project, you will store encrypted logs of the
chat rooms and private messages. These logs should be encrypted with
either a symmetric key that gets loaded into the server via a
specified input file, or a password specified as an input to the
server. I would recommend using &lt;code class=&quot;highlighter-rouge&quot;&gt;cryptography&lt;/code&gt;’s
&lt;a href=&quot;https://cryptography.io/en/latest/fernet/&quot;&gt;Fernet&lt;/a&gt; recipe, which
should be able to take care of most of this for you.&lt;/p&gt;

&lt;p&gt;Each channel is logged in some format like the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alice&amp;gt; This is the first chat
bob&amp;gt; This is the second chat
eve&amp;gt; Yet another chat is here
...
bob&amp;gt; All the way down to the twentieth chat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I don’t care about the precise format as long as you document it. Once
twenty messages have passed on the channel, you should write out an
encrypted file named &lt;code class=&quot;highlighter-rouge&quot;&gt;log-&amp;lt;channelname&amp;gt;-&amp;lt;timestamp&amp;gt;.log&lt;/code&gt;, where
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;channelname&amp;gt;&lt;/code&gt; is the channel’s name (unencrypted), and &lt;code class=&quot;highlighter-rouge&quot;&gt;timestamp&lt;/code&gt;
is the time at which the log was written (in &lt;em&gt;milliseconds&lt;/em&gt; since the
epoch, as returned by &lt;code class=&quot;highlighter-rouge&quot;&gt;int(round(time.time() * 1000))&lt;/code&gt;). This log must
be encrypted with the server’s symmetric key (again, it is &lt;em&gt;up to you&lt;/em&gt;
to determine how to implement this). After that set of twenty messages
has elapsed you will reset the log and again count to twenty new
messages, writing yet another log.&lt;/p&gt;

&lt;p&gt;You will write all of these logs in the &lt;code class=&quot;highlighter-rouge&quot;&gt;logs/&lt;/code&gt; subdirectory of your
server’s folder. In other words, you’ll see:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;logs/
 - log-general_discussions-1233525.log
 - log-general_discussions-1238234.log
 - log-general_discussions-1241483.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Of course, all of the logs will be garbled and unreadable to a
human. So you must &lt;em&gt;also&lt;/em&gt; implement a way to decipher the logs in
sequential order. To do this, you will implement a program named
&lt;code class=&quot;highlighter-rouge&quot;&gt;decipher_logs.{py,...}&lt;/code&gt; (in whatever language you want) that will
take two parameters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The name of the channel to decipher&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The symmetric key (or password, if you use a key derivation
function) used to decipher the logs. If you want to keep this as a
local file instead of having it to be an explicit command-line
argument, that’s also fine. Basically, this script will need some
way in which it has access to the symmetric key used to encrypt the
logs so that it can also decrypt them.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The output of the program should be the sequence of logs for the
channel in the order in which they appeared temporally. In other
words, the decrypted logs for &lt;code class=&quot;highlighter-rouge&quot;&gt;log-general_discussions-1233525.log&lt;/code&gt;
should appear &lt;em&gt;before&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;log-general_discussions-1238234.log&lt;/code&gt;,
etc… You should use the timestamps here to check this. Note also
that your program must check &lt;em&gt;authenticity&lt;/em&gt; of the logs.&lt;/p&gt;

&lt;p&gt;Note that private messages should &lt;em&gt;not&lt;/em&gt; be logged.&lt;/p&gt;

&lt;h4 id=&quot;caution-for-this-part&quot;&gt;Caution for This Part&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Be cautious to avoid known plaintext attacks. Always use randomized
encryption and authenticty checks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;deliverables-for-this-part-2&quot;&gt;Deliverables for this part&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Your design document contains a thoughtful explanation of how you
plan to implement this part, and relevant discussion of all of the
potential security implications. Answer the following questions:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;How will you stop an attacker from reading the file (simple)&lt;/li&gt;
      &lt;li&gt;How will you store and manage the symmetric key&lt;/li&gt;
      &lt;li&gt;What kind of encryption are you using? Be specific, what cipher,
key length, etc…&lt;/li&gt;
      &lt;li&gt;What cryptographic mode are you using? Is it believed to be safe?&lt;/li&gt;
      &lt;li&gt;How do you prevent things like known plaintext attacks?&lt;/li&gt;
      &lt;li&gt;How are you performing authentication?&lt;/li&gt;
      &lt;li&gt;Does your crypto protect against known plaintext attacks? Chosen
plaintext attacks? Chosen ciphertext attacks?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Your changes to the server, implementing the described changes to
log channels.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The program &lt;code class=&quot;highlighter-rouge&quot;&gt;decipher_logs.{py,...}&lt;/code&gt;, which deciphers the logs in
sequential order.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;part-4-extending-the-protocol-with-file-sharing-25-points&quot;&gt;Part 4: Extending the Protocol with File Sharing (25 points)&lt;/h3&gt;

&lt;p&gt;For this part of the project, you will extend the protocol with the
ability to perform file sharing. In our case, each channel (or private
message) will maintain a set of files. We will not allow any folders,
just plain files for this part. The use case for this is something
like this: a friend sees a funny gif online, so they upload it to the
channel an then share it with their friends. The friends can then
check for files with the &lt;code class=&quot;highlighter-rouge&quot;&gt;getfiles&lt;/code&gt; command, which will list the files
associated with the channel. Just as you can upload files to channels,
you should also be able to upload them to private messages.&lt;/p&gt;

&lt;p&gt;You will &lt;em&gt;store&lt;/em&gt; files by making requests to the web server that you
wrote in Part 1G. In that part, we implemented the server with 4
verbs, &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE&lt;/code&gt;. But–because that
communication happens just via plain HTTP–you had better encrypt the
transmission before performing it.&lt;/p&gt;

&lt;p&gt;You should extend the protocol with the following messages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getfiles &amp;lt;channel_or_username&amp;gt;&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Lists the names of files associated with the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;channel_or_username&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;The user sending this command must already be logged into the
channel (specifically, they cannot have been banned from the
channel). If not, send an error to the client.  In the case that
this is a &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;, the user must not have blocked the sender
(if not, send an error).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;upload &amp;lt;channel_or_username&amp;gt; &amp;lt;filename&amp;gt; &amp;lt;length&amp;gt;--&amp;lt;binary_data_here&amp;gt;&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Assume for simplicity that filename has no spaces. If so, send an
error.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;This is how the user will upload the data to the server. You can
use whatever format you want (as long as it’s consistent between
the client and the server), but you will probably need to do
something where you specify the channel to which it’s going, the
name of the file, and the length.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;length&amp;gt;&lt;/code&gt; field is useful because it tells you how much more
data you have to &lt;code class=&quot;highlighter-rouge&quot;&gt;recv&lt;/code&gt; before continuing to parse other messages.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;update &amp;lt;channel_or_username&amp;gt; &amp;lt;filename&amp;gt; &amp;lt;length&amp;gt;--&amp;lt;binary_data_here&amp;gt;&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;The same thing as &lt;code class=&quot;highlighter-rouge&quot;&gt;upload&lt;/code&gt;, excepts this updates the contents of
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;filename&amp;gt;&lt;/code&gt; rather than simply upload the file.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Only the person who initially uploaded the file or a
channel administrator, can update the file.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;remove &amp;lt;channel_or_username&amp;gt; &amp;lt;filename&amp;gt;&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Deletes a file from a channel / private message.&lt;/li&gt;
      &lt;li&gt;Only the person who initially uploaded the file or a channel
administrator can remove the file. (In the case of a private
message, there is no administrator, so just the person who
uploaded it, although that’s a bit of an arbitrary choice.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can take liberty in how you format these commands. If you think
it’s easier to change their syntax, that’s fine. But you must
implement these both in the server and the client. For the client, you
should provide a command &lt;code class=&quot;highlighter-rouge&quot;&gt;/upload&lt;/code&gt;, that allows uploading a file
currently on disc to the server. For example, it might look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#channel&amp;gt; /upload #channel
Type the name of a file you would like to upload:
/path/to/file.txt
Now uploading /path/to/file as file.txt within #channel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The trickiest piece of this part (in my mind) is making sure you
manage the buffer and parsing correctly. For example, you’ll probably
end up in this situation where you need to modify your parser to check
to see if you’re trying to parse an &lt;code class=&quot;highlighter-rouge&quot;&gt;upload&lt;/code&gt; message and–if
so–handle that correctly so that parsing works out correctly.&lt;/p&gt;

&lt;h4 id=&quot;storing-encrypted-files&quot;&gt;Storing Encrypted Files&lt;/h4&gt;

&lt;p&gt;This part is where the first two projects “sync up.” To satisfy the
spec for this project, you should manage files for this part by
running your server from Part 1G and then sending it commands using
Python’s &lt;code class=&quot;highlighter-rouge&quot;&gt;requests&lt;/code&gt; library, similarly to what I did in the tests I
distributed.&lt;/p&gt;

&lt;p&gt;Each of the commands in the protocol mirrors a specific HTTP verb that
you implemented in your server during Project 1G. For example,
&lt;code class=&quot;highlighter-rouge&quot;&gt;upload&lt;/code&gt; mirrors &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;update&lt;/code&gt; mirrors &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The problem in Project 1G was that we implemented our server over raw
HTTP, without any encryption. To rectify that, you should encrypt the
files that you send over the connection, and decrypt them when they
come back (before sending them to the client).&lt;/p&gt;

&lt;p&gt;To be explicit, this means that you will need to run the server you
wrote in Project 1G on your machine, on a specific port, A. Then, you
will need to run your SquirrelChat server on that same machine (or a
different machine, if you want) on a different port B. SquirrelChat
will receive messages from the SquirrelChat client on B, some of which
will be messages to receive data. Then, the SquirrelChat server will
send messages the the 1G server on port A, after encrypting them (to
prevent someone snooping in on the connection).&lt;/p&gt;

&lt;h4 id=&quot;deliverables-for-this-part-3&quot;&gt;Deliverables for this part&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A file named &lt;code class=&quot;highlighter-rouge&quot;&gt;part4.txt&lt;/code&gt; that describes the documents the syntax of
the protocol you propose that will allow you to perform file
exchange.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Updates to the server that accepts files in the specified protocol
and stores them using your server from Project 1G.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you cannot get the server from Project 1G to work, you are
allowed to implement all file storage in Python alone. This will
result in a 6-point penalty for this part, though.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Updates to the client that allow it to send files to the server
(otherwise, why should I believe that your code actually works
correctly!?).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;part-5-encrypted-private-messaging-15-points&quot;&gt;Part 5: Encrypted Private Messaging (15 points)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: For this part of the project, assume that the server is
trusted, but that individual users may not be. For solutions to
receive any credit, the server may not be able to decrypt the messages
sent between users.&lt;/p&gt;

&lt;p&gt;For the last part of the project, we want to support encrypted private
messaging. The goal of this is to allow &lt;code class=&quot;highlighter-rouge&quot;&gt;alice&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;bob&lt;/code&gt; to
communicate over the server in a way so that the server cannot see
what they’re saying to each other.&lt;/p&gt;

&lt;p&gt;There are two broad ways you can do this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Extend the protocol to facilitate a key exchange between two users&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Extend the protocol and clients so that they can exchange public
keys with each other and sign each other messages.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is your choice to decide which of these you will want to use. For
the first, you should read up on a few different kinds of secure key
exchange and choose whichever implementation you might want to use. I
would recommend looking over &lt;a href=&quot;https://cryptography.io/en/latest/hazmat/primitives/asymmetric/&quot;&gt;this
page&lt;/a&gt;
before doing so.&lt;/p&gt;

&lt;p&gt;If you instead choose to use public-key encryption, you should extend
the client so that users can exchange public keys with each other in
an automatic way. Then, you should encrypt and sign messages to users
with their public key. For example, if Alice and Bob want to
communicate, they will first exchange public keys. Then, when Alice
wants to send a message to Bob, she will first encrypt the message to
Bob’s public key, and then sign the result with her private key,
sending the message and the signature. Then, she will send the
resulting blob to the server, which will send it to Bob. Bob will then
authenticate the message using Alice’s public key, and decrypt it
using his private key.&lt;/p&gt;

&lt;p&gt;Note that you will need to extend the protocol to accommodate
this. For example, if you want to support key exchange, you will need
to add commands to the protocol to allow exchanging the components of
the secret key between Alice and Bob. I would do this by adding a
command &lt;code class=&quot;highlighter-rouge&quot;&gt;proposekeycomponent &amp;lt;from&amp;gt; &amp;lt;to&amp;gt; &amp;lt;component&amp;gt;&lt;/code&gt; that the client
sends to the server, and which the server subsequently forwards to the
client. Similarly, if you choose to go the public key route, you need
to extend the protocol in a way that allows exchanging public keys.&lt;/p&gt;

&lt;p&gt;You might ask “well what stops the server from just sending random
junk to someone!?” The answer is, &lt;em&gt;nothing&lt;/em&gt;! That’s why you have to
trust the server. Part 1 of this project is all about ensuring that
you’re only connecting to a server that you can trust.&lt;/p&gt;

&lt;h4 id=&quot;questions-for-this-part&quot;&gt;Questions for This Part&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Did you choose to use key exchange or public key cryptography?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What kind of cipher or key exchange are you performing? What are the
core cryptographic components being used?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Think carefully about your algorithm. Are there any potential
problems you’ve identified? Specifically…&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;What would happen in the presence of a person-in-the-middle
attack?&lt;/li&gt;
      &lt;li&gt;Are replay attacks possible, given your scheme?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;With respect to authenticity, would this part be challenging to
implement in the real world? Specifically, if you &lt;em&gt;couldn’t&lt;/em&gt; trust
the server, what would you need to do?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;part-6-retrospective-document-5-points&quot;&gt;Part 6: Retrospective Document (5 points)&lt;/h3&gt;

&lt;p&gt;At the end of your project, think carefully about each of the parts
you used. For each part, write a paragraph describing a thoughtful
analysis and reflection of the different cryptographic operations you
chose. Answer questions like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Who must be trusted for the cryptography to work correctly?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How will keys be generated and distributed?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What is the role of certificates?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What would be the problems with scaling my implementation?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What parts used asymmetric crypto? What parts used symmetric crypto?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Did you use any hybrid schemes?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How did you ensure randomized crypto was used?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Does your solution prevent known plaintext attacks? Chosen plaintext
attacks?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Last, conclude by writing up a few things you learned about
cryptography–as well as programming with cryptography–during this
project. Let me know which parts you liked, and which parts you
disliked, as well as how this project’s difficulty compared with the
previous project’s.&lt;/p&gt;

&lt;h3 id=&quot;part-7-encrypted-channels-5-points&quot;&gt;Part 7: Encrypted Channels (+5 points)&lt;/h3&gt;

&lt;p&gt;This part is extra credit.&lt;/p&gt;

&lt;p&gt;For this part, I would like you to build encrypted &lt;em&gt;channels&lt;/em&gt;. This
part is fairly challenging, and so I’d like to leave the design up to
you. If you can sketch a well-thought-out design of how this would
work, giving explicit technical details (what libraries you’d use /
code you’d write), I will award 2 points. If you can implement that
design, I will be very impressed and will award the full 5 points. To
receive any credit, the server had better not be able to learn the
contents of any message sent in the channel.&lt;/p&gt;

&lt;p&gt;As a hint for this part, think about the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;How will channels be formed? For example, you could make it so that
when an administrator creates the channel, they also generate a
secret key.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Think about combining symmetric and asymmetric crypto.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You may need to add something to the protocol to inform others in
the channel that a new user has joined, e.g., so that current
members can exchange public keys with them and so that you can send
them a key / agree upon a new key.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you wanted to enforce banning correctly, it will require &lt;a href=&quot;https://en.wikipedia.org/wiki/Forward_secrecy&quot;&gt;forward
secrecy&lt;/a&gt;. I.e., once
a user is blocked, the rest of the users in the channel should
switch to using a new key, so that if the banned user receives
encrypted messages from the point after they have been banned, they
should not be able to read them.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;strategy-for-this-project&quot;&gt;Strategy for This Project&lt;/h2&gt;

&lt;p&gt;I’d start by reading over all of the manual pages for Python’s
&lt;code class=&quot;highlighter-rouge&quot;&gt;cryptography&lt;/code&gt; library and refreshing yourself on the material from
class, starting with small examples before you incorporate your
changes into your server.&lt;/p&gt;

&lt;p&gt;I anticipate that the first three parts will be relatively simple once
you do a bit of reading. The last two parts are more tricky and
open-ended, because they involve an aspect of protocol design and
implementation within both the server and the client. They will also
involve translating the cryptography you learned in class to its
implementation in code, which will be more challenging than you might
think! If in doubt, try to stick to things that aren’t considered
“dangerous” (this might be hard to avoid, for example, in parts 5/6).&lt;/p&gt;

&lt;h4 id=&quot;a-final-note-on-realness-and-danger&quot;&gt;A Final Note on Realness and “Danger”&lt;/h4&gt;

&lt;p&gt;The purpose of this project is to expose you to crypto basics, using
trusted implementations of cryptographic primitives. Reasoning about
cryptography is extremely tricky, an very easy to get wrong. I’m a bit
torn on having you write Part 5, because it trudges a bit into the
“scary” territory for me. You wouldn’t want to roll your own protocols
using crypto in the “real world” without more training on this stuff
(and code review from security experts), and the vast majority of the
time you’ll be using basic HTTPS/TLS/etc..&lt;/p&gt;

&lt;p&gt;Note that I’m actually doing something a bit bad: I should have you
run a real file server that uses HTTPS to encrypt the connection. It’s
a bit hoaky to have you run a hacky server and send messages to it
encrypted with a symmetric key. For one, this is bad because you
should generally stick to using session keys, and it’s also just
generally bad to roll your own implementation of things involving
security. All that being said, I wanted you to write each component
and have something to test in the last “break-it” round at the end of
the course. I also think it will be cool to see the end-to-end system
working together.&lt;/p&gt;
</description>
        <pubDate>Sat, 24 Mar 2018 00:00:00 -0400</pubDate>
        <link>http://kmicinski.com/cybersecurity-course/project/4</link>
        <guid isPermaLink="true">http://kmicinski.com/cybersecurity-course/project/4</guid>
        
        
        <category>project</category>
        
        <category>assignment</category>
        
      </item>
    
      <item>
        <title>Asymmetric (Public-Key) Cryptography</title>
        <description>&lt;h4 id=&quot;slides-on-asymmetric-crypto&quot;&gt;Slides on Asymmetric Crypto&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://kmicinski.com//cybersecurity-course/assets/slides/asymmetric.key&quot;&gt;Keynote&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://kmicinski.com//cybersecurity-course/assets/slides/asymmetric.pdf&quot;&gt;PDF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 20 Mar 2018 00:00:00 -0400</pubDate>
        <link>http://kmicinski.com/cybersecurity-course/lectures/9</link>
        <guid isPermaLink="true">http://kmicinski.com/cybersecurity-course/lectures/9</guid>
        
        
        <category>lectures</category>
        
      </item>
    
      <item>
        <title>Exam 1</title>
        <description>&lt;p&gt;This is Exam 1 for CMSC 311. This exam contains 105 points. It will be
graded out of 100.&lt;/p&gt;

&lt;p&gt;You may write your answers in whichever way you want: printing this
exam and writing on paper, writing inside of this document,
typesetting solutions in latex, etc…&lt;/p&gt;

&lt;p&gt;All I care is that you do the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Don’t Google for any of the answers online&lt;/li&gt;
  &lt;li&gt;Take no more than 8 hours on the test&lt;/li&gt;
  &lt;li&gt;Cite any sources you use&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You are allowed to use the internet under the following circumstances:
you are accessing a manual for a specific program or a reference we’ve
looked up in class. For example, you may look up the GDB manual and
x86 instruction call reference, but you may &lt;em&gt;not&lt;/em&gt; look up how to find
the base address of a function using GDB on StackOverflow. If you are
in doubt, write me an email. In other words, you may not Google for
answers on-demand.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;(10 points) Define, compare, and contrast probabilistic defenses
versus deterministic defenses. Give at least one example of each. Are
they both useful?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(10 points) This question has two subparts.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;5/10 points: Give an example of a small snippet of code that has a
spatial memory safety bug.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;5/10 points: Describe under what circumstances (perhaps but not
necessarily using example code) a program would exhibit a temporal
memory safety bug.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;stack-smashing--buffer-overflows&quot;&gt;(Stack Smashing / Buffer Overflows)&lt;/h4&gt;

&lt;p&gt;Consider the following piece of code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Assume that the address of `shellcode` without ASLR is 0x100000000000ff00
char shellcode[] = 
&quot;\x48\x31\xd2&quot;                                  // xor    %rdx, %rdx
&quot;\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68&quot;      // mov	$0x68732f6e69622f2f, %rbx
&quot;\x48\xc1\xeb\x08&quot;                              // shr    $0x8, %rbx
&quot;\x53&quot;                                          // push   %rbx
&quot;\x48\x89\xe7&quot;                                  // mov    %rsp, %rdi
&quot;\x50&quot;                                          // push   %rax
&quot;\x57&quot;                                          // push   %rdi
&quot;\x48\x89\xe6&quot;                                  // mov    %rsp, %rsi
&quot;\xb0\x3b&quot;                                      // mov    $0x3b, %al
&quot;\x0f\x05&quot;;                                     // syscall

char *foo(int x, char *z) {
  // Assume that `buffer`'s address is 0x200000000000ff00
  // Assume that the saved instruction pointer is stored at 0x200000000000ff20
  char buffer[8];       // Line A
  // Line B
  while (x &amp;gt; 0) {
    buffer[x] = z[x];
    x--;
  }
}

int main(int argc, char **argv) {
  char *hello = foo(strlen(argv[1]), argv[1]);
  // ...
  // You will describe something here.
  // 
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To simplify your task in the following, assume that you can call the
program with binary command-line arguments. In other words, assume
that you can give the program a command-line argument containing the
byte 0 (even though you couldn’t typically because that’s the end of a
C string).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;(5 Points) Give me command line arguments to the program that would cause it to
crash.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(10 Points) (Stack smashing) For now, assume that ASLR has been turned
off in our system. This means that each time the program starts, the
static data segment, code segment, stack, etc.. will all get the same
value each time the program is run. For this problem, assume that the
buffer &lt;code class=&quot;highlighter-rouge&quot;&gt;shellcode&lt;/code&gt; is located at address &lt;code class=&quot;highlighter-rouge&quot;&gt;0x10000000ffaa0000&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Describe an input that would cause the program to execute the code in
&lt;code class=&quot;highlighter-rouge&quot;&gt;shellcode&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;payload-injection&quot;&gt;Payload injection&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;(10 points) Now assume that the &lt;code class=&quot;highlighter-rouge&quot;&gt;shellcode&lt;/code&gt; variable is removed from
the program. We can’t play the same trick as in the last
problem. Instead, we must inject the shellcode via the program’s
input. You may still assume that ASLR and NX are turned off, but for
this problem, assume that the base address of &lt;code class=&quot;highlighter-rouge&quot;&gt;buffer&lt;/code&gt; is
&lt;code class=&quot;highlighter-rouge&quot;&gt;0x200000000000ff00&lt;/code&gt;.` Describe an input that would inject the
shellcode and redirect execution to it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(10 points) How would you change the program to eliminate this attack?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(5 points) Describe what the NX bit does. Why does it make it hard to
launch the attack described in problem 5?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;nop-sleds&quot;&gt;NOP-sleds&lt;/h4&gt;

&lt;p&gt;(5 points) A “NOP-sled” is a long sequence of NOPs before a payload
that is inserted into the program.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;\x66\x90&quot;
&quot;\x66\x90&quot;
&quot;\x66\x90&quot;
... thousands more ...
&quot;\x66\x90&quot;
&quot;\x66\x90&quot;
&quot;\x48\x31\xd2&quot;                                  // xor    %rdx, %rdx
&quot;\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68&quot;      // mov	$0x68732f6e69622f2f, %rbx
&quot;\x48\xc1\xeb\x08&quot;                              // shr    $0x8, %rbx
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Describe why a NOP-sled might be useful in the presence of ASLR or in
the scenario in which you weren’t certain where the program would be
loaded (e.g., because of variations in environment variables).&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;heap-exploits&quot;&gt;Heap exploits&lt;/h4&gt;

&lt;p&gt;Assume that we had the following structure.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct person {
    // Address base+0
    unsigned int is_administrator;
    // Address base+4
    char username[50];
    // Address base+56
    char *(*login_shell)(char *);  // Pointer to C function that accepts a
                                   // string (char *) as an argument and returns a string (char *)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Assume the compiler lays out structured data for &lt;code class=&quot;highlighter-rouge&quot;&gt;person&lt;/code&gt; in the
manner described in the comments. I.e., if the base address of the
struct is at address &lt;code class=&quot;highlighter-rouge&quot;&gt;0xAA00&lt;/code&gt;, then the address of the &lt;code class=&quot;highlighter-rouge&quot;&gt;login_shell&lt;/code&gt;
variable will be stored at &lt;code class=&quot;highlighter-rouge&quot;&gt;0xAA38&lt;/code&gt;. You may assume the function
&lt;code class=&quot;highlighter-rouge&quot;&gt;system&lt;/code&gt; is stored at the (8-byte) address &lt;code class=&quot;highlighter-rouge&quot;&gt;0x000000AAAAAA0000&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Assume that after you are logged in, the program calls the function
pointed to by &lt;code class=&quot;highlighter-rouge&quot;&gt;login_shell&lt;/code&gt; with the data stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;(10 points) Describe what you could put in &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt; so that you
effected a call to &lt;code class=&quot;highlighter-rouge&quot;&gt;system(&quot;/bin/sh&quot;)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;aslr--attack-theory&quot;&gt;ASLR / attack theory&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;(10 points) Assume that ASLR is enabled.  Are stack-canaries and
other memory-safety controls still relevant? If they are still
relevant, write an example program which demonstrates a vulnerability
that would exist even with ASLR. If not, explain how ASLR fixes the
problem stack canaries solve. (Big Hint: think about data-only
attacks, consider writing something like a password-checking program
that calls a function to copy a string.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;control-flow-integrity&quot;&gt;Control-flow integrity&lt;/h4&gt;

&lt;p&gt;Consider the following program:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void foo() {
  char buf[200];
  // .. 
  bar(); // Line 1
  // .. 
}

void bar() {
  char buf2[100];
  // .. 
  return; // Line 3;
}

void system() {
  // .. 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;(10 points) Control-flow integrity is a compile-time (or runtime, in
some cases) instrumentation of the program.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;2/10 points: What does control-flow integrity do, and why is it
helpful?&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;4/10 points: In the above program, how would the following be
transformed:
        &lt;ul&gt;
          &lt;li&gt;The call to bar() at line 1&lt;/li&gt;
          &lt;li&gt;The return from bar() at line 3&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;2/10 points: How does CFI ensure the program can’t call system?&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;2/10 points: Assume we had provably perfect CFI. Would we have then
ensured memory-safety?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;systems-security-concepts&quot;&gt;Systems Security Concepts&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;(5 points) Programs that are Set-UID inherit the privileges of their owners when
they are called. For example, the program &lt;code class=&quot;highlighter-rouge&quot;&gt;ping&lt;/code&gt; uses raw ICMP sockets
to check the status of remote hosts, which requires the program to
have the privileges of the &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; user.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In 3-6 sentences, detail why such Set-UID programs warrant extra
attention from us.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;(5 points) Consider that Process A contains secret data somewhere in its memory
space. For example, maybe it is a server process that stores grades
for the course. Sometimes, Process A might want to run untrusted code
(e.g., downloaded from the internet). If done by naively running code
in the same process space, this lead to security vulnerabilities,
because the untrusted code will have accesss to all of process A’s
memory.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What operating-system principle could be used to allow process A to
run this untrusted code in a way so that the untrusted code does not
gain access to process A’s data?&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Mar 2018 00:00:00 -0500</pubDate>
        <link>http://kmicinski.com/cybersecurity-course/exams/1</link>
        <guid isPermaLink="true">http://kmicinski.com/cybersecurity-course/exams/1</guid>
        
        
        <category>project</category>
        
        <category>assignment</category>
        
      </item>
    
      <item>
        <title>Symmetric Cryptography and Integrity</title>
        <description>&lt;p&gt;The week before Spring Break, we covered symmetric-key cryptography.&lt;/p&gt;

&lt;h4 id=&quot;intro-and-block-ciphers&quot;&gt;Intro and Block Ciphers&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://kmicinski.com//cybersecurity-course/assets/slides/intro-cryptography.key&quot;&gt;Keynote&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://kmicinski.com//cybersecurity-course/assets/slides/intro-cryptography.pdf&quot;&gt;PDF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;integrity&quot;&gt;Integrity&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://kmicinski.com//cybersecurity-course/assets/slides/crypto-integrity.key&quot;&gt;Keynote&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://kmicinski.com//cybersecurity-course/assets/slides/crypto-integrity.pdf&quot;&gt;PDF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 06 Mar 2018 00:00:00 -0500</pubDate>
        <link>http://kmicinski.com/cybersecurity-course/lectures/8</link>
        <guid isPermaLink="true">http://kmicinski.com/cybersecurity-course/lectures/8</guid>
        
        
        <category>lectures</category>
        
      </item>
    
      <item>
        <title>Project 2I: SquirrelChat</title>
        <description>&lt;p&gt;In this project, you’ll be writing a chat server. You’ll interface
with this chat server in a variety of ways: you can either telnet to
it manually and send commands, interface using a client (which I’ll
hand out in the next week or two), or (in project 3) using a web
frontend. The protocol is reminiscent of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Relay_Chat&quot;&gt;IRC&lt;/a&gt; or
&lt;a href=&quot;https://en.wikipedia.org/wiki/Slack_(software)&quot;&gt;Slack&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The SquirrelChat protocol is described precisely at the end of this
document. Your server must correctly implement all of the commands
according to the protocol. To test your server, you’ll either use
&lt;code class=&quot;highlighter-rouge&quot;&gt;telnet&lt;/code&gt; or hand-rolled testing scripts. I’ll give you one or two of
these scripts upon project release, but I’ll also require that you
write some of your own. I’ll maintain a public Github repo to which
you will contribute tests via pull request.&lt;/p&gt;

&lt;p&gt;I have implemented some basic stub code that does parsing for various
messages. You can write your SquirrelChat server in whatever language
you want, but my starter code is given in Python. I would welcome
implementations in OCaml, Haskell, etc.. But I assume no obligation to
teach you these languages as part of this project. If you use a
particularly cool language or a particularly elegant technique (e.g.,
if you go out on a limb and try to use Haskell to write the server), I
&lt;em&gt;may&lt;/em&gt; award you 1-4 points of extra credit.&lt;/p&gt;

&lt;p&gt;SquirrelChat is a fairly simple chat protocol. There are users, and
there are channels (“chat rooms”). Users can join (or create)
channels. Channels have a set of “administrators” that can change
their topic (a short message that is associated with the
channel). When a user sends a message to a channel, all members of the
channel receive it. Users can also send private messages to each
other. SquirrelChat also allows users to block each other, and has a
few security features (e.g., only admins can change topics and ban
users). Additionally, users may upload files to channels or to another
user.&lt;/p&gt;

&lt;p&gt;In this assignment, you’ll implement the core of SquirrelChat as a
server that my client can connect to. There are also a set of tests,
some of which I’ve given you (others which I haven’t). SquirrelChat is
inherently insecure: it’s executing over raw sockets, meaning that
people in the middle will be able to sniff all of the information sent
across SquirrelChat (e.g., someone sniffing packets in the same coffee
shop as you). In the next assignment we’ll add multiple security
features to SquirrelChat: encryption, encrypted file storage, properly
saving passwords, and having properly encrypted channels so that only
the members of secure channels can see each others’ messages.&lt;/p&gt;

&lt;p&gt;This assignment is open-ended by design. Throughout the course of the
project, I will periodically release some tests for you, but I am not
under &lt;em&gt;obligation&lt;/em&gt; to give you all of the tests I will use. If you
have any questions on the spec, please let me know and I’ll update
immediately.&lt;/p&gt;

&lt;h1 id=&quot;command-overview&quot;&gt;Command Overview&lt;/h1&gt;

&lt;p&gt;SquirrelChat packets are specified as follows. See &lt;code class=&quot;highlighter-rouge&quot;&gt;parser.py&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;messages.py&lt;/code&gt; for details. This is the master specification.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IMPORTANT Note&lt;/strong&gt;: the maximum length of &lt;em&gt;any&lt;/em&gt; packet in this part of
the project is &lt;code class=&quot;highlighter-rouge&quot;&gt;1024&lt;/code&gt;. You are &lt;em&gt;not&lt;/em&gt; obligated to handle the case
where packets longer than that are sent.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;register &amp;lt;username&amp;gt; &amp;lt;password&amp;gt;&lt;/code&gt; [5 points]
    &lt;ul&gt;
      &lt;li&gt;Both &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt; are contiguous strings (i.e., no spaces)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt; may not start with the character &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; (used for channels).&lt;/li&gt;
      &lt;li&gt;Upon successfully sending &lt;code class=&quot;highlighter-rouge&quot;&gt;register&lt;/code&gt;, the server automatically
logs the user in as &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;username&amp;gt;&lt;/code&gt; with the associated password&lt;/li&gt;
      &lt;li&gt;Must save a new record in the password database for username and password (the password database is described below)&lt;/li&gt;
      &lt;li&gt;If the &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt; is invalid, or if the register command is given more arguments, then the server should return an &lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt; message with some descriptive error of your choice.&lt;/li&gt;
      &lt;li&gt;Example: &lt;code class=&quot;highlighter-rouge&quot;&gt;register kmicinski helloworld234**&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;authenticate &amp;lt;username&amp;gt; &amp;lt;password&amp;gt;&lt;/code&gt; [5 points]
    &lt;ul&gt;
      &lt;li&gt;Checks the password file for the entry of &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt; and–if the username matches the password–logs in the user.&lt;/li&gt;
      &lt;li&gt;If the &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt; does not match the one stored in the password database, returns an &lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt; of the appropriate type.&lt;/li&gt;
      &lt;li&gt;Example: &lt;code class=&quot;highlighter-rouge&quot;&gt;register kmicinski helloworld234**&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;update_pw &amp;lt;password&amp;gt;&lt;/code&gt; [5 points]
    &lt;ul&gt;
      &lt;li&gt;User must be logged in&lt;/li&gt;
      &lt;li&gt;Updates a logged-in user’s password as &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;password&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Also updates the password file&lt;/li&gt;
      &lt;li&gt;Example: &lt;code class=&quot;highlighter-rouge&quot;&gt;update_pw helloworld234**&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;join &amp;lt;channel_name&amp;gt;&lt;/code&gt; [5 points]
    &lt;ul&gt;
      &lt;li&gt;User must be logged in.&lt;/li&gt;
      &lt;li&gt;Validate that &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;channel_name&amp;gt;&lt;/code&gt; starts with &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;. All channels have
&lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; at the start of their name.&lt;/li&gt;
      &lt;li&gt;If the channel &lt;em&gt;exists&lt;/em&gt;:
        &lt;ul&gt;
          &lt;li&gt;Check to make sure the user is not banned from the channel.
            &lt;ul&gt;
              &lt;li&gt;If they are, return an error message to the user indicating this.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;If they are not banned, add the user to the channel, they will now 
receive subsequent messages to that channel.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;If the channel does &lt;em&gt;not&lt;/em&gt; exist:
        &lt;ul&gt;
          &lt;li&gt;Create the channel&lt;/li&gt;
          &lt;li&gt;Make the sending user the administrator of the channel&lt;/li&gt;
          &lt;li&gt;Add the user as the only member of the channel&lt;/li&gt;
          &lt;li&gt;Set the topic to some initial message&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Example: &lt;code class=&quot;highlighter-rouge&quot;&gt;join #hello&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chat &amp;lt;user_or_channel&amp;gt; &amp;lt;message&amp;gt;&lt;/code&gt; [5 points]
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;user_or_channel&amp;gt;&lt;/code&gt; is a contiguous string, but &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;message&amp;gt;&lt;/code&gt; is
just the rest of the message.&lt;/li&gt;
      &lt;li&gt;This is a message that a &lt;em&gt;user&lt;/em&gt; sends to the &lt;em&gt;server&lt;/em&gt;&lt;/li&gt;
      &lt;li&gt;If the user is logged in, check to make sure that the user or
channel exists. If they aren’t, send an error back.&lt;/li&gt;
      &lt;li&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;user_or_channel&amp;gt;&lt;/code&gt; starts with a &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;, it is a channel. Ensure
that the user is logged in to the channel. If they are not, send
back an &lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt; message of the appropriate type.&lt;/li&gt;
      &lt;li&gt;If it does not start with &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;, it is a user. Check to ensure the
user exists. IF the user does not exist, send back an &lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt; of
the appropriate type.&lt;/li&gt;
      &lt;li&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;user_or_channel&amp;gt;&lt;/code&gt; is a user that has not blocked the
currently logged in user. If they have, do nothing.&lt;/li&gt;
      &lt;li&gt;If they have not blocked the sender of the message, the server
sends that user a &lt;code class=&quot;highlighter-rouge&quot;&gt;chatfrom&lt;/code&gt; message.&lt;/li&gt;
      &lt;li&gt;Example: &lt;code class=&quot;highlighter-rouge&quot;&gt;chat #channel Hi there everyone!&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Example: &lt;code class=&quot;highlighter-rouge&quot;&gt;chat eliana Hi there, Eliana!&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chatfrom &amp;lt;from_user&amp;gt; &amp;lt;channel_or_user&amp;gt; &amp;lt;message&amp;gt;&lt;/code&gt; [5 points]
    &lt;ul&gt;
      &lt;li&gt;This is a command that the &lt;em&gt;server&lt;/em&gt; sends to a &lt;em&gt;client&lt;/em&gt;.&lt;/li&gt;
      &lt;li&gt;The way to interpret this is that &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;from_user&amp;gt;&lt;/code&gt; sent a message to
channel &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;channel_or_user&amp;gt;&lt;/code&gt; if &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;channel_or_user&amp;gt;&lt;/code&gt; begins with
&lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;. Otherwise, this is a private message, and the username is in
the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;channel_or_user&amp;gt;&lt;/code&gt; field.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;from_user&amp;gt;&lt;/code&gt; is a logged in user.&lt;/li&gt;
      &lt;li&gt;This command will never be received from users who have been
blocked by the client. In other words, if Alice has blocked Bob,
Alice will never receive messages from Bob: either on channels to
which Bob belongs, or through private messages.&lt;/li&gt;
      &lt;li&gt;Example: &lt;code class=&quot;highlighter-rouge&quot;&gt;chatfrom bob #hello Hello there, everyone!&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Example: &lt;code class=&quot;highlighter-rouge&quot;&gt;chatfrom bob alice Hello there, Alice!&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gettopic #channel&lt;/code&gt; [5 points]
    &lt;ul&gt;
      &lt;li&gt;Gets the topic for a channel&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;topic #channel &amp;lt;topic&amp;gt;&lt;/code&gt; [5 points]
    &lt;ul&gt;
      &lt;li&gt;The server returns this packet as the result of a &lt;code class=&quot;highlighter-rouge&quot;&gt;gettopic&lt;/code&gt;
command, assuming that the user is logged in to the given channel
 (i.e., has successfully run a &lt;code class=&quot;highlighter-rouge&quot;&gt;join&lt;/code&gt; command for that channel).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;settopic #channel &amp;lt;topic&amp;gt;&lt;/code&gt; [5 points]
    &lt;ul&gt;
      &lt;li&gt;Sets the topic for a channel, assuming the sender is the
administrator of that channel.&lt;/li&gt;
      &lt;li&gt;Sends back error otherwise.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;leave #channel&lt;/code&gt; [5 points]
    &lt;ul&gt;
      &lt;li&gt;The sender will now stop receiving &lt;code class=&quot;highlighter-rouge&quot;&gt;chatfrom&lt;/code&gt; messages sent to
&lt;code class=&quot;highlighter-rouge&quot;&gt;#channel&lt;/code&gt;. If they were the administrator, they are still the
administrator. Nobody else becomes an administrator.&lt;/li&gt;
      &lt;li&gt;Sender must be able to join again later.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;error &amp;lt;msg&amp;gt;&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;The server sends this error to a client in the event that an error
occurs.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ban &amp;lt;channel&amp;gt; &amp;lt;user&amp;gt;&lt;/code&gt; [5 points]
    &lt;ul&gt;
      &lt;li&gt;If the sender of this message is the administrator of &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;channel&amp;gt;&lt;/code&gt;,
then &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;user&amp;gt;&lt;/code&gt; is now banned from &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;channel&amp;gt;&lt;/code&gt; and can no longer
receive messages. I.e., it is essentially as if &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;user&amp;gt;&lt;/code&gt; had run
the &lt;code class=&quot;highlighter-rouge&quot;&gt;leave&lt;/code&gt; command.&lt;/li&gt;
      &lt;li&gt;If the sender is &lt;em&gt;not&lt;/em&gt; the administrator, send an &lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt; of the
appropriate type.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;unban &amp;lt;channel&amp;gt; &amp;lt;user&amp;gt;&lt;/code&gt; [5 points]
    &lt;ul&gt;
      &lt;li&gt;If the sender of this message is the administrator of &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;channel&amp;gt;&lt;/code&gt;,
then &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;user&amp;gt;&lt;/code&gt; is now unbanned from &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;channel&amp;gt;&lt;/code&gt; and can &lt;code class=&quot;highlighter-rouge&quot;&gt;join&lt;/code&gt;
again.&lt;/li&gt;
      &lt;li&gt;If the sender is &lt;em&gt;not&lt;/em&gt; the administrator, send an &lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt; of the
appropriate type.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;block &amp;lt;user&amp;gt;&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Block the specified username. Send the appropriate error if the
user does not exist.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;starting-the-server&quot;&gt;Starting the Server&lt;/h1&gt;

&lt;p&gt;The server is started via (in the &lt;code class=&quot;highlighter-rouge&quot;&gt;server&lt;/code&gt; directory)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./server passwords.csv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Where &lt;code class=&quot;highlighter-rouge&quot;&gt;passwords.csv&lt;/code&gt; is a CSV file listing usernames and passwords
for the server. CSV files are in &lt;a href=&quot;https://en.wikipedia.org/wiki/Comma-separated_values&quot;&gt;Comma-Separated
Values&lt;/a&gt;
format. An example &lt;code class=&quot;highlighter-rouge&quot;&gt;passwords.csv&lt;/code&gt; might look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;username,password
isabella,hacker12**@a3
john,aacv23aad%$aD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The file will &lt;em&gt;always&lt;/em&gt; start with the header (first line) of
&lt;code class=&quot;highlighter-rouge&quot;&gt;username,password&lt;/code&gt; and will be followed by a set of lines containing
usernames and values, each separated by a comma.&lt;/p&gt;

&lt;p&gt;Any password database must be able to be used, not just
&lt;code class=&quot;highlighter-rouge&quot;&gt;passwords.csv&lt;/code&gt;. Various commands (&lt;code class=&quot;highlighter-rouge&quot;&gt;register&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;update_pw&lt;/code&gt;) will
&lt;em&gt;change&lt;/em&gt; the database. You must &lt;em&gt;save&lt;/em&gt; an updated database whenever
these commands are sent to the server.&lt;/p&gt;

&lt;h1 id=&quot;part-0-design-document-10-points&quot;&gt;Part 0: Design Document (10 points)&lt;/h1&gt;

&lt;p&gt;This project is intended to give you practice programming “in the
large.” You will need to use a variety of data structures to help you
implement this server. Specifically, think about the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How you will implement channels?&lt;/li&gt;
  &lt;li&gt;How will users be represented? (E.g., as classes?)&lt;/li&gt;
  &lt;li&gt;How will you manage the state of the protocol? I.e., how will you
make sure users don’t send messages until they are logged in?&lt;/li&gt;
  &lt;li&gt;How will you handle blocking and banning?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Write this in an email / document / Google Doc / etc… And give it to
me before you start writing up your code so I can read over it. I will
point you in the right directions. If you are feeling anxious about
how to tackle this, come to my office and we will sketch it out on the
board.&lt;/p&gt;

&lt;h1 id=&quot;part-1-server-protocol-implementation-60-points&quot;&gt;Part 1: Server Protocol Implementation (60 points)&lt;/h1&gt;

&lt;p&gt;This part is the majority of the project. You are to flesh out the
implementation of the server according to the command specification
given above. I have provided starter code in the &lt;code class=&quot;highlighter-rouge&quot;&gt;server&lt;/code&gt; directory of
this project.&lt;/p&gt;

&lt;p&gt;You will get credit for each piece of the protocol you implement. Any
questions about minor technicalities can be addressed to me via Piazza
/ email and I will respond very quickly. I will also keep the course
webpage updated.&lt;/p&gt;

&lt;h1 id=&quot;part-2-writing-tests-10-points&quot;&gt;Part 2: Writing Tests (10 points)&lt;/h1&gt;

&lt;p&gt;You must find &lt;em&gt;two separate pieces&lt;/em&gt; of the project and figure out how
to write tests for them. For example, you might choose to ensure that
users can’t send messages to other users that have blocked them. Or
you might want to ensure that usernames can’t start with &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;. Write
these as two separate tests using either hand-rolled code or a unit
testing framework in your language of choice. Write in this README
where you put them.&lt;/p&gt;

&lt;h1 id=&quot;part-3-password-managers-and-pgp-10-points&quot;&gt;Part 3: Password Managers and PGP (10 points)&lt;/h1&gt;

&lt;p&gt;For this part of the project, you can do one of two things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Install a password manager and start using it for all of your
passwords.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a &lt;a href=&quot;https://www.pitt.edu/~poole/accessiblePGP703.htm&quot;&gt;PGP key&lt;/a&gt;
for yourself and begin cryptographically signing your communication
with a few other people you communicate with. You can do this by,
e.g., writing me an email and signing it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You must at least &lt;em&gt;read&lt;/em&gt; about how PGP works and figure out what it
means to cryptographically sign your emails. We’ll cover a bit of this
in class, and you’ll start to do it on project 2G with your team.&lt;/p&gt;

&lt;p&gt;To receive credit for this part, create a document in this directory,
&lt;code class=&quot;highlighter-rouge&quot;&gt;experiences.txt&lt;/code&gt;, and write a brief discussion of your experiences
with either of these tools. Describe the pains and advantages of using
them, and how using one of the two has informed your thoughts on
security.&lt;/p&gt;

&lt;h1 id=&quot;if-you-get-stuck&quot;&gt;If you get stuck…&lt;/h1&gt;

&lt;p&gt;Don’t spend more than an hour or two stuck on a problem. If you feel
like you’re stuck and not being productive, email me sooner rather
than later. These things can be tricky. You’re all very good, though,
so I know you can do it..!&lt;/p&gt;
</description>
        <pubDate>Sat, 03 Mar 2018 00:00:00 -0500</pubDate>
        <link>http://kmicinski.com/cybersecurity-course/project/3</link>
        <guid isPermaLink="true">http://kmicinski.com/cybersecurity-course/project/3</guid>
        
        
        <category>project</category>
        
        <category>assignment</category>
        
      </item>
    
      <item>
        <title>Lecture 7: CFI and Malware</title>
        <description>&lt;p&gt;Slides for today:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://kmicinski.com//cybersecurity-course/assets/slides/lec-7-malware-analysis.key&quot;&gt;Keynote&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://kmicinski.com//cybersecurity-course/assets/slides/lec-7-malware-analysis.pdf&quot;&gt;PDF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Assigned reading for &lt;strong&gt;today’s&lt;/strong&gt; class:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.trust.informatik.tu-darmstadt.de/fileadmin/user_upload/Group_TRUST/PubsPDF/MoCFI-NDSS-2012.pdf&quot;&gt;MoCFI: A Framework to Mitigate Control-Flow Attacks on Smartphones&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 15 Feb 2018 00:00:00 -0500</pubDate>
        <link>http://kmicinski.com/cybersecurity-course/lectures/7</link>
        <guid isPermaLink="true">http://kmicinski.com/cybersecurity-course/lectures/7</guid>
        
        
        <category>lectures</category>
        
      </item>
    
      <item>
        <title>Lecture 6: Secure Coding</title>
        <description>&lt;p&gt;Slides for today:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://kmicinski.com//cybersecurity-course/assets/slides/lec-6-cfi-secure-coding.key&quot;&gt;Keynote&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://kmicinski.com//cybersecurity-course/assets/slides/lec-6-cfi-secure-coding.pdf&quot;&gt;PDF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 13 Feb 2018 00:00:00 -0500</pubDate>
        <link>http://kmicinski.com/cybersecurity-course/lectures/6</link>
        <guid isPermaLink="true">http://kmicinski.com/cybersecurity-course/lectures/6</guid>
        
        
        <category>lectures</category>
        
      </item>
    
      <item>
        <title>Project 1G: Implementing a File Server</title>
        <description>&lt;p&gt;&lt;strong&gt;Caution!&lt;/strong&gt; This code will be graded on the virtual machine for the
course. If your code does not run on that virtual machine, you will
not be counted as receiving credit.&lt;/p&gt;

&lt;p&gt;In this project, you’ll implement a web application that serves and
retrieves files. Part of this server was implemented in the previous
project, but it didn’t actually do the work of storing files on disk
and properly responding to HTTP requests.&lt;/p&gt;

&lt;p&gt;This portion of the project is group work. During the course of this
project you are allowed access to all online resources, but you are
required to cite any resource that gave you any significant insight
into the project, including conversations you had with those outside
of your group. You will put these sources in &lt;code class=&quot;highlighter-rouge&quot;&gt;SOURCES.md&lt;/code&gt; within this
folder.&lt;/p&gt;

&lt;p&gt;This project consists of two broad parts: attacks and
implementation. The attacks section will have you use ROP to get
around the NX bit and defeat modern defenses. The implementation
section will have you use defensive programming to implement the file
server. You can choose to divvy up these tasks in whatever way makes
sense for your group: you can all work on different parts, or work on
each part together. But by the end of the project, every team member
is responsible for understanding each part of the project (under
penalty of not understanding well and then getting a bad grade on the
exam). I recommend not getting &lt;em&gt;stuck&lt;/em&gt; on one part, though, since they
are logically independent.&lt;/p&gt;

&lt;p&gt;Please respect the department’s collaboration policy. Specifically,
you are not allowed to look at any other group’s &lt;em&gt;code&lt;/em&gt; (or do
anything equivalent, such as talking through your code on a
line-by-line basis). You may discuss pseudo-code on the board, but
afterwards you must erase it (so as to not let anyone else see it) and
then cite your conversation with the other person in a comment in your
code (and in the sources file). &lt;strong&gt;Within&lt;/strong&gt; your group you may
collaborate in whatever way you want.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you get stuck, look at the hints / advice at the bottom of this
guide.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;project-overview&quot;&gt;Project Overview&lt;/h1&gt;

&lt;p&gt;The goal of this project is to teach you the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Launching a ROP-based exploit that defeats ASLR, NX, and stack canaries&lt;/li&gt;
  &lt;li&gt;Defensive Programming&lt;/li&gt;
  &lt;li&gt;Writing an HTTP server in a native language&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You should first obtain the starter files for this project, perform a
&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone&lt;/code&gt; of this project’s repository:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone github.com/security-course/file-server-group
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The starter code is contained in a file &lt;code class=&quot;highlighter-rouge&quot;&gt;server.c&lt;/code&gt;. But in the later
part of the project, you’ll ditch that starter code and instead write
your own server using whatever libraries you want.&lt;/p&gt;

&lt;h3 id=&quot;collaboration-policy&quot;&gt;Collaboration Policy&lt;/h3&gt;

&lt;p&gt;Specific examples that extend the collaboration policy for this lab:
Same as on Project 1I, except replace ever occurrence of “other
students” with “other groups.” This is to say, you may say whatever
you want to your groupmembers, but shouldn’t talk about low-level
details and addresses with other groups. I was quite satisfied with
the level of collaboration that happened on the last project, so keep
it up.&lt;/p&gt;

&lt;h2 id=&quot;attacks&quot;&gt;Attacks&lt;/h2&gt;

&lt;p&gt;In this part, we’ll be launching attacks against a security-hardened
version of the server. Our server still contains vulnerabilities, but
for this project ASLR will be turned &lt;strong&gt;on&lt;/strong&gt;. I’ll also be turning on
the NX bit, meaning you can’t inject code into the program and execute
it.&lt;/p&gt;

&lt;h3 id=&quot;part-0-exploiting-aslr&quot;&gt;Part 0: Exploiting ASLR&lt;/h3&gt;

&lt;p&gt;In this part, you should look carefully at the implementation of
&lt;code class=&quot;highlighter-rouge&quot;&gt;server.c&lt;/code&gt; and think about how you could get the server to return to
you the contents of the file &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/self/maps&lt;/code&gt;. This will allow you to
defeat ASLR since you’ll be able to learn the base address of certain
values.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deliverable&lt;/strong&gt;: The function &lt;code class=&quot;highlighter-rouge&quot;&gt;dump_proc_self_maps&lt;/code&gt; in
&lt;code class=&quot;highlighter-rouge&quot;&gt;client.py&lt;/code&gt;. This function–when run–prints the contents of the
server’s &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/self/maps&lt;/code&gt; to the screen of the &lt;em&gt;client&lt;/em&gt;. (I.e., if I
run it in python I should see the address on the server.)&lt;/p&gt;

&lt;h3 id=&quot;part-1-mounting-a-ret-to-libc-attack&quot;&gt;Part 1: Mounting a Ret-to-libc attack&lt;/h3&gt;

&lt;p&gt;In this part, you’re just going to cause the server to shut down. This
is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Denial-of-service_attack&quot;&gt;denial of service
(DOS)&lt;/a&gt;
attack. You can’t inject code into the program to make it run &lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt;,
so instead you’ll have to reuse the function &lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt;, which is already
a part of &lt;code class=&quot;highlighter-rouge&quot;&gt;glibc&lt;/code&gt;. Find it and run that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deliverable&lt;/strong&gt;: The function &lt;code class=&quot;highlighter-rouge&quot;&gt;server_exit&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;client.py&lt;/code&gt;. This
function–when run–causes the server to call &lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt; via a
return-to-libc attack.&lt;/p&gt;

&lt;p&gt;Note that this will be run with ASLR turned &lt;strong&gt;on&lt;/strong&gt;. This means that
you’ll have to parse the contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/self/maps&lt;/code&gt; you get from
the previous part.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: In this version of &lt;code class=&quot;highlighter-rouge&quot;&gt;server.c&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; command has
changed slightly. Instead of the command being&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The new command is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo 5 hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The format is &lt;code class=&quot;highlighter-rouge&quot;&gt;echo NNNNN data&lt;/code&gt;, where &lt;code class=&quot;highlighter-rouge&quot;&gt;NNNNN&lt;/code&gt; is a number of at most
five characters in length, followed by a space, followed by the
data. The number &lt;code class=&quot;highlighter-rouge&quot;&gt;NNNNN&lt;/code&gt; specifies how much data to grab from &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;
and put into &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt;. This makes it so that you can input binary data
into the buffer &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt; containing zeros.&lt;/p&gt;

&lt;p&gt;Also note that the server prints out the socket being used, which will
be helpful in subsequent parts.&lt;/p&gt;

&lt;h3 id=&quot;part-2-finding-rop-gadgets&quot;&gt;Part 2: Finding ROP gadgets&lt;/h3&gt;

&lt;p&gt;In this part of the assignment, you’re going to use
return-oriented-programming to write the secret key out to the socket
so that the attacker gets it on the other end of the
wire. Essentially, you want to effect this sequence&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;%rax&lt;/code&gt; contains 1&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;%rdi&lt;/code&gt; contains the socket number (which you get from echo)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;%rsi&lt;/code&gt; contains the base of the secret key (which you get from
&lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/self/maps&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;%rdx&lt;/code&gt; contains the length of the secret key (which doesn’t really
matter, just set it at something like 100)&lt;/li&gt;
  &lt;li&gt;Finally, call &lt;code class=&quot;highlighter-rouge&quot;&gt;syscall&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To find gadgets, use the tool “Gadget Finder” in the EDB debugging
toolkit. I have included a copy of EDB on the virtual machine for the
class. For this part of the project, I recommend you either run the VM
with its GUI, or use X forwarding to forward EDB to XQuartz.&lt;/p&gt;

&lt;p&gt;The gadget finder is available in EDB under the graphical menu
“Plugins -&amp;gt; ROPTool.” It has a number of configurations that allow you
to select which parts of the code you want to search and which
operations you want to find.&lt;/p&gt;

&lt;p&gt;Remember that it might be the case that there is no such gadget that
simply moves 1 into &lt;code class=&quot;highlighter-rouge&quot;&gt;%rax&lt;/code&gt;. Instead, you might have to use a
combination of things (e.g., one that pops the top of the stack into
%rbx and then exchanges &lt;code class=&quot;highlighter-rouge&quot;&gt;%bx&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;%ax&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deliverable&lt;/strong&gt;: the file &lt;code class=&quot;highlighter-rouge&quot;&gt;rop_gadgets.txt&lt;/code&gt; that lists the various
gadgets you will use for your attack and lists how you will weave them
together.&lt;/p&gt;

&lt;h3 id=&quot;part-3-executing-the-gadgets&quot;&gt;Part 3: Executing the gadgets&lt;/h3&gt;

&lt;p&gt;Now actually execute the attack. This attack must work even with ASLR
turned on, meaning that you’ll have to construct the payload on the
fly after reading &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/self/maps&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deliverable&lt;/strong&gt;: the function &lt;code class=&quot;highlighter-rouge&quot;&gt;rop&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;client.py&lt;/code&gt; that performs a
ROP-based attack on the server to force it to dump the secret key.&lt;/p&gt;

&lt;h3 id=&quot;part-4-rop-with-stack-protection&quot;&gt;Part 4: ROP with Stack Protection&lt;/h3&gt;

&lt;p&gt;The version of the server I gave you for this assignment still has
stack canaries turned off. This makes it possible to exploit the
stack-based buffer overflows in the server. However, assuming the
stack protector were turned on, it would be harder to launch this kind
of an attack. Change the server so that it is susceptible to a
ROP-based attack but also with the stack protector turned on. Clearly
(since the stack protector is on) you won’t be able to use a
stack-based buffer overflow (at least one of the form
&lt;code class=&quot;highlighter-rouge&quot;&gt;strcpy(buffer)&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deliverable&lt;/strong&gt;: a file &lt;code class=&quot;highlighter-rouge&quot;&gt;server_exploitable_canaries.c&lt;/code&gt; that is
exploitable with canaries turned on, and a description of how it would
be exploited (either as an attack via a Python function like the
previous parts, or a text-based description). Do your vulnerability
writeup in a file &lt;code class=&quot;highlighter-rouge&quot;&gt;how_to_exploit_canaries.txt&lt;/code&gt; and possibly link to
any functions that launch the exploit.&lt;/p&gt;

&lt;h2 id=&quot;defenses--implementation&quot;&gt;Defenses / Implementation&lt;/h2&gt;

&lt;p&gt;The second part of your project will be to implement an HTTP-based web
app that acts as a file server and accepts HTTP verbs. Your file
server will serve and store files on disc. In the next assignment, you
will use this file server to store files (or you can throw it
away and reimplement it in Python, using this project as a learning
experience). During this part, you’ll also document different
security-related problems you thought about in code and how you
designed to confront them.&lt;/p&gt;

&lt;p&gt;Along with your group, I recommend you read &lt;a href=&quot;https://www.jmarshall.com/easy/http/&quot;&gt;HTTP Made Really
  Easy&lt;/a&gt;. It doesn’t cover
  everything, but it covers enough to give you the gist.&lt;/p&gt;

&lt;p&gt;For this project, you’ll be writing in any native language. I’ve
provided starter code in C. But you can choose to reimplement it in
C++ if you’d like (though the easiest thing to do would be to write in
C). If you’d rather, you can also write in Rust, Go, etc… as long as
it works with the tests scripts (which will call &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt;). I expect
most teams will write in C (I did while completing this project), and
if you choose to use another language I am not obligated to support
your learning it. If you want to be adventurous and choose another
(native) language, don’t let me stop you. Just make sure it works with
all of the tests.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Careful&lt;/strong&gt;: don’t just start extending &lt;code class=&quot;highlighter-rouge&quot;&gt;server.c&lt;/code&gt; like you might be
tempted to. There is some advice at the end of this document that
details picking an HTTP library.&lt;/p&gt;

&lt;h3 id=&quot;server-setup&quot;&gt;Server setup&lt;/h3&gt;

&lt;p&gt;Your server must run as a binary file named &lt;code class=&quot;highlighter-rouge&quot;&gt;fs&lt;/code&gt;. It must accept
&lt;strong&gt;two&lt;/strong&gt; command-line arguments: the first is the port on which it will
server data. The second is the root directory from which it will serve
files. An example run of the server–and the one I will use in my
tests–looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./fs 8080 ./files secret_key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will tell the server to start serving files from the &lt;code class=&quot;highlighter-rouge&quot;&gt;files&lt;/code&gt;
directory on port 8080. Subsequently, I will refer to this
command-line argument as the “root directory.”&lt;/p&gt;

&lt;h3 id=&quot;requirements&quot;&gt;Requirements&lt;/h3&gt;

&lt;p&gt;The goal of this project is to write a web server which serves files
on a given port. Your server must accept four “verbs” in the HTTP
protocol and behave as described in the following subparts. Note that
in each of these subparts, the headline is only the verb, not the
headers or body that follows it. If you’re stuck here, read about how
HTTP works: it will be useful for you to know about anyway.&lt;/p&gt;

&lt;h4 id=&quot;get-pathtofile-http11&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /path/to/file HTTP/1.1&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;The server must respond to HTTP &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; requests and return files in a
number of MIME types. To see an example of this, start the server like
this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./fs 8080 ./files secret-key&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now open a web browser and point it at &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:8080&lt;/code&gt;. You should
see a web page and a gif of a cat. Your job is to make sure that you
implement this HTTP request correctly (i.e., fixing all of the bugs
present in my implementation). You must also support more file types
than I am currently supporting: the MIME types need to be lined up
appropriately.&lt;/p&gt;

&lt;p&gt;An example GET request looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /sample.pdf HTTP/1.1
Host: localhost:8080
Connection: keep-alive
Accept-Encoding: gzip, deflate
Accept: */*
User-Agent: python-requests/2.18.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The constraints for &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; are as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[5 points] When the client (either a &lt;code class=&quot;highlighter-rouge&quot;&gt;telnet&lt;/code&gt; user, a web browser, a
Python script, etc..) issues a &lt;code class=&quot;highlighter-rouge&quot;&gt;GET /path/to/file&lt;/code&gt; command to your
server, your server should respond by looking up the file
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;root-directory&amp;gt;/path/to/file&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[2 points] If the file exists, it must &lt;em&gt;serve&lt;/em&gt; that file in a
response and respond with a &lt;code class=&quot;highlighter-rouge&quot;&gt;200 OK&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[2 points] If the file does &lt;em&gt;not&lt;/em&gt; exist, it must respond with a &lt;code class=&quot;highlighter-rouge&quot;&gt;404
Not Found&lt;/code&gt; and list the file which was not found.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[2 points] If the file exists, but is &lt;em&gt;not&lt;/em&gt; world readable, your
server &lt;strong&gt;must&lt;/strong&gt; return a &lt;code class=&quot;highlighter-rouge&quot;&gt;403 Forbidden&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[2 points] If–in looking up the file–you encounter a file which is
not world-executable, you must return a &lt;code class=&quot;highlighter-rouge&quot;&gt;403 Forbidden&lt;/code&gt;. For
example, say that there is a file &lt;code class=&quot;highlighter-rouge&quot;&gt;files/myfolder/foo.txt&lt;/code&gt;, and that
&lt;code class=&quot;highlighter-rouge&quot;&gt;myfolder&lt;/code&gt;’s permissions are &lt;code class=&quot;highlighter-rouge&quot;&gt;770&lt;/code&gt; (i.e., readable, writable, and
executable by user and group, but not readable, writable, or
executable by anyone else) then you must return &lt;code class=&quot;highlighter-rouge&quot;&gt;403&lt;/code&gt;, even if
&lt;code class=&quot;highlighter-rouge&quot;&gt;foo.txt&lt;/code&gt; is world readable.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[5 points] Your server &lt;strong&gt;must never&lt;/strong&gt; allow any request for any file
that is in any subdirectory of the root directory. For example, it
had better not leak &lt;code class=&quot;highlighter-rouge&quot;&gt;../../../../proc/self/maps&lt;/code&gt; (or something like
that).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[5 points] In the case that the user attempts to &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; a folder, the
server must do something a bit special. It must return an HTML page
that returns a list of links to files within the folder. For
example, if the folder &lt;code class=&quot;highlighter-rouge&quot;&gt;/path&lt;/code&gt; contains the files &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt;,
it should return a page something like this&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;&lt;/span&gt;/path&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;&lt;/span&gt;/path&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;localhost:8080/path/foo&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;foo&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;localhost:8080/path/bar&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;bar&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;post-pathtofile-http11&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;POST /path/to/file HTTP/1.1&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;To allow the user to upload files, your server will respond to a POST
request. A POST request is an instruction that tells the server that
the client wants to create something on the server. In this case, that
will be a file.&lt;/p&gt;

&lt;p&gt;Here’s an example of what a POST to our server looks like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /examplepdf.pdf HTTP/1.1;
Host: localhost:8080
Connection: keep-alive
Accept-Encoding: gzip, deflate
Accept: */*
User-Agent: python-requests/2.18.4
Content-Length: 54982
Content-Type: multipart/form-data; boundary=d6e135d1e0f243bf8a931baf7e3ae35e

--d6e135d1e0f243bf8a931baf7e3ae35e
Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;sample.pdf&quot;

PDF-1.2
6 0 obj
&amp;lt;&amp;lt; /S /GoTo /D (chapter.1) &amp;gt;&amp;gt;
endobj
8 0 obj
(Template)
endobj
10 0 obj
&amp;lt;&amp;lt; /S /GoTo /D (section.1.1) &amp;gt;&amp;gt;
endobj
12 0 obj
(How to compile a texttt {.tex} file to a texttt {.pdf} file)
endobj
14 0 obj
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[10 points] &lt;code class=&quot;highlighter-rouge&quot;&gt;POST /path/to/file&lt;/code&gt; should accept multipart-encoded
data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; is a fairly flexible HTTP verb, allowing a very general
interaction with the server. You don’t need to know everything about
it to accomplish the tasks in this project, but reading about it
might help make it more concrete.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[2 points] Similarly to GET, POST must return a &lt;code class=&quot;highlighter-rouge&quot;&gt;403&lt;/code&gt; if the request
traverses into a folder that is not world-executable or tries to
write a file that is not world writable.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[2 points] POST should return &lt;code class=&quot;highlighter-rouge&quot;&gt;400&lt;/code&gt; (invalid request) if the
filename that the user tries to write is invalid.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[5 points] In the case that the &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; tries to put the file in a
folder that does not yet exist, the folder should be created. So,
for example, if the client &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt;s data to &lt;code class=&quot;highlighter-rouge&quot;&gt;/path/to/file&lt;/code&gt; and only
the folder &lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt; exists, the folder &lt;code class=&quot;highlighter-rouge&quot;&gt;to&lt;/code&gt; should be created (as long
as &lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt; is executable and writable).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;put-pathtofile-http11&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PUT /path/to/file HTTP/1.1&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;[2 points] This should do the same thing as POST, except that in the
case the file does not yet exist it should return a &lt;code class=&quot;highlighter-rouge&quot;&gt;400&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;delete-pathtofile&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE /path/to/file&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;[5 points] As long as the permissions are correct (i.e., the file does
not lie on a path wherein you traverse into a folder that isn’t
world-executable, and the ultimate file and folder are world
writable), the file will be deleted. Return &lt;code class=&quot;highlighter-rouge&quot;&gt;404&lt;/code&gt; in the case the file
does not exist, or &lt;code class=&quot;highlighter-rouge&quot;&gt;403&lt;/code&gt; in the case of a permissions violation.&lt;/p&gt;

&lt;h4 id=&quot;summary-of-commands&quot;&gt;Summary of commands&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /path/to/file&lt;/code&gt; Fetches a file, ensuring permissions are
correct. Also note that for directories, GET will return an HTML
page that gives links to the files contained within the directory.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;POST /path/to/file&lt;/code&gt; Uploads a file, ensuring that permissions are
correct and creating necessary subdirectories. Multipart-encoded
form data must be supported. See the test in &lt;code class=&quot;highlighter-rouge&quot;&gt;test_post_file.py&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PUT /path/to/file&lt;/code&gt; Updates an already-existing file.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE /path/to/file&lt;/code&gt; Deletes an existing file&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;preventing-external-traffic&quot;&gt;Preventing External Traffic&lt;/h3&gt;

&lt;p&gt;This part is worth 5 points.&lt;/p&gt;

&lt;p&gt;Your server is very vulnerable. You’ve now made something that allows
anyone that can talk to your computer to be able to store and read
files on it. This is certainly a bad idea. So you should turn it off.&lt;/p&gt;

&lt;p&gt;Read this guide and figure out how to block incoming and outgoing
traffic to port &lt;code class=&quot;highlighter-rouge&quot;&gt;8080&lt;/code&gt; (or whatever port you decide to use). (Note
that you might need to read other guides too, generally: google around
for how to do this.)&lt;/p&gt;

&lt;p&gt;https://www.thegeekdiary.com/centos-rhel-how-to-block-incoming-and-outgoing-ports-using-iptables/&lt;/p&gt;

&lt;p&gt;When you figure it out, write a shell script &lt;code class=&quot;highlighter-rouge&quot;&gt;block_ports.sh&lt;/code&gt; that does
this.&lt;/p&gt;

&lt;p&gt;The reason this is important is that when we move on to the next part
of the assignment you’ll write a chat server. Your chat server will
eventually hook up to this server to store the files.&lt;/p&gt;

&lt;h3 id=&quot;denial-of-service-dos-prevention&quot;&gt;Denial-Of-Service (DOS) Prevention&lt;/h3&gt;

&lt;p&gt;This part is worth 6 points.&lt;/p&gt;

&lt;p&gt;Right now, if I open up a &lt;code class=&quot;highlighter-rouge&quot;&gt;telnet&lt;/code&gt; connection to the server, the
server will be “tied up” in the sense that I can’t open up another
connection to the server in another terminal. This is bad: it means
that an attacker could take the server offline simply by taking too
long to complete their request.&lt;/p&gt;

&lt;p&gt;You must figure out how to solve this problem. To do so, you should
use either processes or threads to handle each incoming connection
into the server. This will make your server a bit better. Of course,
industrial-strength server setups also include a number of other
network-based protection mechanisms (such as blocking whole swaths of
IP ranges when they flood the server with too many requests).&lt;/p&gt;

&lt;h2 id=&quot;server-tests-and-example-implementation-in-python&quot;&gt;Server tests and Example Implementation in Python&lt;/h2&gt;

&lt;p&gt;There are a few tests you can execute against your server. Be careful
to modify the tests so that they point at the proper port.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;test_get.py&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;test_get_harder.py&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;test_post_file.py&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;test_put_file.py&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that I am &lt;strong&gt;not&lt;/strong&gt; giving you every single test I will use. This
is by design. I have given you a specification I will use, and will
test your submission using various combinations of this and the tool
&lt;a href=&quot;https://www.getpostman.com/&quot;&gt;Postman&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You are required to write your own tests for this project, possibly in
Python, shell scripts, etc.. While I will not explicitly grade these,
I reserve the right to lower your grade if you don’t have at least a
few tests for big features.&lt;/p&gt;

&lt;p&gt;To give you an idea of how the assignment should work, I have written
an example implementation in Python. It is in the file &lt;code class=&quot;highlighter-rouge&quot;&gt;server.py&lt;/code&gt;. I
recommend you look it over and try to see what it’s doing. Your
implementation should have a similar flavor. But it will probably be
quite a bit more work, since you’ll need to figure out which libraries
to use, and C is just going to be more verbose than Python no matter
what.&lt;/p&gt;

&lt;p&gt;Note that you’ll have to install a few python packages to use that
server. You’ll have to do a &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo pip install&lt;/code&gt; to get them. I have a
file &lt;code class=&quot;highlighter-rouge&quot;&gt;setup_tests.sh&lt;/code&gt; that will do this.&lt;/p&gt;

&lt;h2 id=&quot;notes-on-ethics-and-realness&quot;&gt;Notes on Ethics and “realness”&lt;/h2&gt;

&lt;p&gt;You would not want to use this server in practice, because it’s just
an HTTP server. In particular, anyone looking at your connection will
be able to snoop all of the data you transfer (including the
files). One way to fix this is to use HTTPS, which runs HTTP over
&lt;a href=&quot;https://en.wikipedia.org/wiki/Transport_Layer_Security&quot;&gt;SSL&lt;/a&gt;. This
allows all of the communication with the server to be encrypted. Your
server does &lt;em&gt;not&lt;/em&gt; implement SSL/TLS. So if you want to use it to store
files for the next part of the assignment, the smart thing to do is to
wall off the port and use it only for local traffic.&lt;/p&gt;

&lt;h2 id=&quot;compiling-your-code&quot;&gt;Compiling Your Code&lt;/h2&gt;

&lt;p&gt;You might ask how you compile your code. This is your job to figure
out. I would most prefer it if you use a &lt;code class=&quot;highlighter-rouge&quot;&gt;Makefile&lt;/code&gt;. If you’re using
libraries, you better include them. Basically, I need to be able to
figure out how to build your code easily, and it is your job to figure
out how to do it. If in doubt, ask the people in the class that have
more experience with low-level programming. It is totally fine to
collaborate on things like Makefiles at any extent, as long as you
don’t collaborate on the main source files (outside of your group:
within your group do whatever you want).&lt;/p&gt;

&lt;h2 id=&quot;deliverables&quot;&gt;Deliverables&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: Deliverables will be accepted in no other format than those
listed here. Specifically: if you write code that technically works,
but does not fit the format the testing scripts expect, you will not
receive points. Also note that &lt;em&gt;no partial credit&lt;/em&gt; will be assigned
throughout the course as a matter of policy, unless otherwise noted
explicitly.&lt;/p&gt;

&lt;p&gt;Attacks:&lt;/p&gt;

&lt;p&gt;Part 0: Exploiting ASLR&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;[ ]/5 The function &lt;code class=&quot;highlighter-rouge&quot;&gt;dump_proc_self_maps&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;client.py&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Part 1: Mounting a Ret-to-libc attack&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;[ ]/10 The function &lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;client.py&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Part 2: Finding ROP gadgets&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;[ ]/10 The file &lt;code class=&quot;highlighter-rouge&quot;&gt;rop_gadgets.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Part 3: Launching the attack&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;[ ]/10 The function &lt;code class=&quot;highlighter-rouge&quot;&gt;rop&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Part 4: ROP with Stack Protection&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;[ ]/5 The file &lt;code class=&quot;highlighter-rouge&quot;&gt;server_exploitable_canaries.c&lt;/code&gt; and friends&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Defenses:&lt;/p&gt;

&lt;p&gt;Part 0: &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt;`&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[ ]/5 Basic file lookup&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[ ]/2 If the file exists, it must &lt;em&gt;serve&lt;/em&gt; that file in a response
and respond with a &lt;code class=&quot;highlighter-rouge&quot;&gt;200 OK&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[ ]/2 If the file does &lt;em&gt;not&lt;/em&gt; exist, it must respond with a &lt;code class=&quot;highlighter-rouge&quot;&gt;404
Not Found&lt;/code&gt; and list the file which was not found.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[ ]/2 If the file exists, but is &lt;em&gt;not&lt;/em&gt; world readable, your
server &lt;strong&gt;must&lt;/strong&gt; return a &lt;code class=&quot;highlighter-rouge&quot;&gt;403 Forbidden&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[ ]/2 If–in looking up the file–you encounter a file which is
not world-executable, you must return a &lt;code class=&quot;highlighter-rouge&quot;&gt;403 Forbidden&lt;/code&gt;. For
example, say that there is a file &lt;code class=&quot;highlighter-rouge&quot;&gt;files/myfolder/foo.txt&lt;/code&gt;, and that
&lt;code class=&quot;highlighter-rouge&quot;&gt;myfolder&lt;/code&gt;’s permissions are &lt;code class=&quot;highlighter-rouge&quot;&gt;770&lt;/code&gt; (i.e., readable, writable, and
executable by user and group, but not readable, writable, or
executable by anyone else) then you must return &lt;code class=&quot;highlighter-rouge&quot;&gt;403&lt;/code&gt;, even if
&lt;code class=&quot;highlighter-rouge&quot;&gt;foo.txt&lt;/code&gt; is world readable.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[ ]/5 Your server &lt;strong&gt;must never&lt;/strong&gt; allow any request for any file
that is in any subdirectory of the root directory. For example, it
had better not leak &lt;code class=&quot;highlighter-rouge&quot;&gt;../../../../proc/self/maps&lt;/code&gt; (or something like
that).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[ ]/5 In the case that the user attempts to &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; a folder, the
server must do something a bit special. It must return an HTML page
that returns a list of links to files within the folder. For
example, if the folder &lt;code class=&quot;highlighter-rouge&quot;&gt;/path&lt;/code&gt; contains the files &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt;,
it should return a page something like this&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Part 1: &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[ ]/10 &lt;code class=&quot;highlighter-rouge&quot;&gt;POST /path/to/file&lt;/code&gt; should accept multipart-encoded
data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[ ]/2 POST must return a &lt;code class=&quot;highlighter-rouge&quot;&gt;403&lt;/code&gt; if the request traverses into a folder
that is not world-executable or tries to write a file that is not
world writable.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[ ]/2 POST should return &lt;code class=&quot;highlighter-rouge&quot;&gt;400&lt;/code&gt; (invalid request) if the filename
that the user tries to write is invalid.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[ ]/5 In the case that the &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; tries to put the file in a folder
that does not yet exist, the folder should be created. So, for
example, if the client &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt;s data to &lt;code class=&quot;highlighter-rouge&quot;&gt;/path/to/file&lt;/code&gt; and only the
folder &lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt; exists, the folder &lt;code class=&quot;highlighter-rouge&quot;&gt;to&lt;/code&gt; should be created (as long as
&lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt; is executable and writable).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Part 2: &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[ ]/2 This should do the same thing as POST, except that in the case
the file does not yet exist it should return a &lt;code class=&quot;highlighter-rouge&quot;&gt;400&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Part 3: &lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[ ]/5 Implementation of DELETE as described above.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Part 4: [ ]/5 Preventing External Traffic&lt;/p&gt;

&lt;p&gt;Part 5: [ ]/6 DOS Protection&lt;/p&gt;

&lt;p&gt;Total: [ ]/100&lt;/p&gt;

&lt;h2 id=&quot;personal-advice-on-accomplishing-this-project&quot;&gt;Personal Advice on Accomplishing this Project&lt;/h2&gt;

&lt;p&gt;With the proper selection of tools, this assignment should not be an
overwhelming amount of work. In particular, avoid parsing HTTP
manually: that’s error prone and it’s going to get complicated
fast. You likely have not had extensive exposure to HTTP before this
project, and possibly not extensive socket programming experience
either. Because of that, make sure you start early. Budget time to
learn about HTTP. Most of the time, the best way to figure things out
is to start hacking on something.&lt;/p&gt;

&lt;p&gt;Right now, the server is written to manually parse the HTTP
request. In general, you shouldn’t do that: you’re going to expend a
ton of time and effort and probably get it wrong. Instead, I recommend
that you use a library that parses HTTP requests for you. Here are a
few I think might help you:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/nodejs/http-parser&lt;/li&gt;
  &lt;li&gt;https://github.com/h2o/picohttpparser&lt;/li&gt;
  &lt;li&gt;https://github.com/iafonov/multipart-parser-c&lt;/li&gt;
  &lt;li&gt;https://github.com/Samsung/http-parser&lt;/li&gt;
  &lt;li&gt;https://github.com/francoiscolas/multipart-parser&lt;/li&gt;
  &lt;li&gt;https://github.com/soywod/c-request&lt;/li&gt;
  &lt;li&gt;https://github.com/nekipelov/httpparser&lt;/li&gt;
  &lt;li&gt;https://github.com/AndreLouisCaron/httpxx&lt;/li&gt;
  &lt;li&gt;https://github.com/c9s/h3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these parsers are callback-based: you set them up and they
call back a function whenever you’ve read all of the data. So–for
example–you can set them up to call one of your functions when
they’ve read all of the &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; request, and then you get a pointer to
it (and its length), which you can use to write it to a file.&lt;/p&gt;

&lt;p&gt;Remember that the point of this project is to practice writing secure
code. Using other people’s libraries can be helpful: if they’ve
written code well, then it saves you time. But if you pull some random
student’s HTTP parser off github and use it in your project, you
should be mindful it might have bugs: these will come back to bite you
(i.e., &lt;em&gt;lower your grade&lt;/em&gt;) later in the “break it” phase of the final
project when other students find bugs in the code you
included. Therefore, make sure to read over the code you include.&lt;/p&gt;

&lt;h2 id=&quot;resources-and-advice&quot;&gt;Resources and Advice&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;I recommend you read &lt;a href=&quot;https://www.jmarshall.com/easy/http/&quot;&gt;HTTP Made Really
Easy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;You’ll also need to read about HTTP multipart POSTs:&lt;/li&gt;
  &lt;li&gt;https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#4xx_Client_errors&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 10 Feb 2018 00:00:00 -0500</pubDate>
        <link>http://kmicinski.com/cybersecurity-course/project/2</link>
        <guid isPermaLink="true">http://kmicinski.com/cybersecurity-course/project/2</guid>
        
        
        <category>project</category>
        
        <category>assignment</category>
        
      </item>
    
      <item>
        <title>Lecture 5: ROP Practice and Control-Flow Integrity</title>
        <description>&lt;p&gt;Slides for today:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://kmicinski.com//cybersecurity-course/assets/slides/lec-5-rop-cfi.key&quot;&gt;Keynote&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://kmicinski.com//cybersecurity-course/assets/slides/lec-5-rop-cfi.pdf&quot;&gt;PDF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Assigned reading for &lt;strong&gt;today’s&lt;/strong&gt; class:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cseweb.ucsd.edu/~hovav/dist/geometry.pdf&quot;&gt;The Geometry of Innocent Flesh on the Bone: Return-into-libc without Function Calls&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 08 Feb 2018 00:00:00 -0500</pubDate>
        <link>http://kmicinski.com/cybersecurity-course/lectures/5</link>
        <guid isPermaLink="true">http://kmicinski.com/cybersecurity-course/lectures/5</guid>
        
        
        <category>lectures</category>
        
      </item>
    
  </channel>
</rss>
